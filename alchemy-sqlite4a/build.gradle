apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName rootProject.version
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.pro'
        }
    }

    libraryVariants.all { variant ->
        int versionCode = 0
        (rootProject.version =~ /(\d+)/).collect {
            Integer.parseInt(it[0] as String)
        }.take(3).eachWithIndex { num, index ->
            versionCode += (num * Math.max(1, (1000000 / Math.pow(1000, index))))
        }
        variant.mergedFlavor.versionCode = versionCode
    }
}

dependencies {
    provided "alchemy:alchemy:${rootProject.version}"
    compile "alchemy:alchemy-sqlite:${rootProject.version}"
    provided 'sqlite4a:sqlite4a:3.18.0'
}

apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId rootProject.group
            artifactId project.name
            version rootProject.version

            artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
            artifact sourcesJar

            pom.withXml {
                asNode().children().last() + project.pomXml
                def dependencies = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                    dependency.appendNode('scope', 'compile')
                }
            }
        }
    }
}

project.tasks.withType(PublishToMavenLocal).all { it.dependsOn 'assembleRelease' }
